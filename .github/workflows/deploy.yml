name: Deploy to Server


on:
  push:
    branches:
      - main  # main 브랜치에 push 될 때만 실행

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source
      uses: actions/checkout@v3

    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Create application.properties from secrets
      working-directory: back
      run: |
        mkdir -p src/main/resources
        cat <<EOF > src/main/resources/application.properties
        spring.application.name=back

        server.port=8080
        base-url=http://52.78.213.185:8080/schoopy/v1

        spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
        spring.datasource.url=${{ secrets.DB_URL }}
        spring.datasource.username=${{ secrets.DB_USERNAME }}
        spring.datasource.password=${{ secrets.DB_PASSWORD }}
        spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
        spring.jpa.hibernate.ddl-auto=update

        spring.mail.host=smtp.gmail.com
        spring.mail.port=587
        spring.mail.username=${{ secrets.MAIL_USERNAME }}
        spring.mail.password=${{ secrets.MAIL_PASSWORD }}
        spring.mail.properties.mail.smtp.auth=true
        spring.mail.properties.mail.smtp.starttls.enable=true
        spring.mail.properties.mail.smtp.from=${{ secrets.MAIL_USERNAME }}
        spring.mail.properties.mail.debug=true

        cloud.aws.credentials.accessKey=${{ secrets.AWS_ACCESS_KEY }}
        cloud.aws.credentials.secretKey=${{ secrets.AWS_SECRET_KEY }}
        cloud.aws.region.static=ap-northeast-2
        cloud.aws.s3.bucket=${{ secrets.AWS_BUCKET }}

        spring.security.oauth2.client.registration.kakao.client-id=${{ secrets.KAKAO_CLIENT_ID }}
        spring.security.oauth2.client.registration.kakao.client-secret=${{ secrets.KAKAO_CLIENT_SECRET }}
        spring.security.oauth2.client.registration.kakao.redirect-uri=http://localhost:3000/oauth2/authorization/kakao/link
        spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
        spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
        spring.security.oauth2.client.registration.kakao.scope=profile_nickname
        spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
        spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
        spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
        spring.security.oauth2.client.provider.kakao.user-name-attribute=id

        spring.security.oauth2.client.registration.naver.client-id=${{ secrets.NAVER_CLIENT_ID }}
        spring.security.oauth2.client.registration.naver.client-secret=${{ secrets.NAVER_CLIENT_SECRET }}
        spring.security.oauth2.client.registration.naver.redirect-uri=http://localhost:3000/oauth2/authorization/naver/link
        spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
        spring.security.oauth2.client.registration.naver.scope=email
        spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
        spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
        spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
        spring.security.oauth2.client.provider.naver.user-name-attribute=response

        secret-key=${{ secrets.JWT_SECRET_KEY }}
        openai.api.key=${{ secrets.OPENAI_API_KEY }}
        EOF

    - name: Grant execute permission to Gradle Wrapper
      run: chmod +x gradlew
      working-directory: back

    - name: Build with Gradle
      run: ./gradlew clean build
      working-directory: back

    - name: Deploy JAR and restart.sh to EC2 and execute
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        echo "$PRIVATE_KEY" > key.pem
        chmod 600 key.pem

        # EC2 연결 테스트
        ssh -o StrictHostKeyChecking=no -i key.pem $USER@$HOST "echo Connected to EC2"

        # JAR & restart.sh 복사
        scp -o StrictHostKeyChecking=no -i key.pem back/build/libs/back-0.0.1-SNAPSHOT.jar $USER@$HOST:/home/ubuntu/schoopy/
        scp -o StrictHostKeyChecking=no -i key.pem back/script/restart.sh $USER@$HOST:/home/ubuntu/schoopy/
        ssh -o StrictHostKeyChecking=no -i key.pem $USER@$HOST "chmod +x /home/ubuntu/schoopy/restart.sh"

        # 애플리케이션 재시작
        ssh -o StrictHostKeyChecking=no -i key.pem $USER@$HOST "bash /home/ubuntu/schoopy/restart.sh"

        rm -f key.pem
